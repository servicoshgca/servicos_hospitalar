const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testPermissions() {
  try {
    console.log('üîç Testando funcionalidades de permiss√µes...\n');

    // 1. Verificar se existem usu√°rios
    const users = await prisma.user.findMany({
      include: {
        funcionario: true,
        permissoes: {
          include: {
            sistema: true,
            perfil: true,
          },
        },
      },
    });

    console.log(`üìä Total de usu√°rios: ${users.length}`);
    
    if (users.length === 0) {
      console.log('‚ùå Nenhum usu√°rio encontrado. Crie usu√°rios primeiro.');
      return;
    }

    // 2. Verificar se existem sistemas
    const sistemas = await prisma.sistema.findMany({
      where: { ativo: true },
    });

    console.log(`üìä Total de sistemas ativos: ${sistemas.length}`);
    
    if (sistemas.length === 0) {
      console.log('‚ùå Nenhum sistema encontrado. Crie sistemas primeiro.');
      return;
    }

    // 3. Verificar se existem perfis
    const perfis = await prisma.perfil.findMany({
      where: { ativo: true },
    });

    console.log(`üìä Total de perfis ativos: ${perfis.length}`);
    
    if (perfis.length === 0) {
      console.log('‚ùå Nenhum perfil encontrado. Crie perfis primeiro.');
      return;
    }

    // 4. Verificar usu√°rios administradores
    const admins = users.filter(user => 
      user.permissoes.some(permissao => permissao.perfil.nivel >= 3)
    );

    console.log(`üëë Usu√°rios administradores: ${admins.length}`);
    
    if (admins.length === 0) {
      console.log('‚ö†Ô∏è  Nenhum usu√°rio administrador encontrado.');
      console.log('   Para usar o sistema de permiss√µes, voc√™ precisa de um usu√°rio com n√≠vel 3 ou superior.');
    } else {
      console.log('‚úÖ Usu√°rios administradores encontrados:');
      admins.forEach(admin => {
        console.log(`   - ${admin.funcionario.nome} (${admin.funcionario.cpf})`);
      });
    }

    // 5. Mostrar permiss√µes existentes
    const allPermissions = await prisma.userPermission.findMany({
      include: {
        user: {
          include: {
            funcionario: true,
          },
        },
        sistema: true,
        perfil: true,
      },
    });

    console.log(`\nüìã Total de permiss√µes: ${allPermissions.length}`);
    
    if (allPermissions.length > 0) {
      console.log('üìã Permiss√µes existentes:');
      allPermissions.forEach(permission => {
        console.log(`   - ${permission.user.funcionario.nome} ‚Üí ${permission.sistema.nome} (${permission.perfil.nome})`);
      });
    }

    // 6. Mostrar dados dispon√≠veis para atribui√ß√£o
    console.log('\nüìã Dados dispon√≠veis para atribui√ß√£o de permiss√µes:');
    
    console.log('\nüë• Usu√°rios:');
    users.forEach(user => {
      console.log(`   - ${user.funcionario.nome} (${user.funcionario.cpf})`);
    });

    console.log('\nüñ•Ô∏è  Sistemas:');
    sistemas.forEach(sistema => {
      console.log(`   - ${sistema.nome}${sistema.descricao ? ` - ${sistema.descricao}` : ''}`);
    });

    console.log('\nüë§ Perfis:');
    perfis.forEach(perfil => {
      console.log(`   - ${perfil.nome} (N√≠vel ${perfil.nivel})${perfil.descricao ? ` - ${perfil.descricao}` : ''}`);
    });

    console.log('\n‚úÖ Teste conclu√≠do!');
    console.log('\nüìù Para usar o sistema de permiss√µes:');
    console.log('   1. Fa√ßa login com um usu√°rio administrador');
    console.log('   2. Clique em "Gerenciar Permiss√µes" na p√°gina principal');
    console.log('   3. Use a interface para atribuir, editar ou remover permiss√µes');

  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testPermissions(); 