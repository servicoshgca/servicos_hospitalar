import { Injectable, NotFoundException } from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import { CreateTipoEtiquetaDto, UpdateTipoEtiquetaDto } from './dto';
import { LogsService, CreateLogDto } from '../logs/logs.service';

@Injectable()
export class TiposEtiquetasService {
  constructor(
    private prisma: PrismaService,
    private logsService: LogsService,
  ) {}

  async create(createTipoEtiquetaDto: CreateTipoEtiquetaDto, usuarioId: string, ip?: string, userAgent?: string) {
    const tipoEtiqueta = await this.prisma.tipoEtiqueta.create({
      data: createTipoEtiquetaDto,
    });

    // Registrar log de cria√ß√£o
    const logData: CreateLogDto = {
      acao: 'CREATE',
      entidade: 'TipoEtiqueta',
      entidadeId: tipoEtiqueta.id,
      sistema: 'GP',
      dadosNovos: tipoEtiqueta,
      usuarioId,
      ip,
      userAgent,
    };

    await this.logsService.create(logData);

    return tipoEtiqueta;
  }

  async findAll() {
    return this.prisma.tipoEtiqueta.findMany({
      where: { ativo: true },
      orderBy: { nome: 'asc' },
    });
  }

  async findOne(id: string) {
    const tipoEtiqueta = await this.prisma.tipoEtiqueta.findUnique({
      where: { id },
    });

    if (!tipoEtiqueta) {
      throw new NotFoundException(`Tipo de etiqueta com ID ${id} n√£o encontrado`);
    }

    return tipoEtiqueta;
  }

  async update(id: string, updateTipoEtiquetaDto: UpdateTipoEtiquetaDto, usuarioId: string, ip?: string, userAgent?: string) {
    const tipoEtiquetaAnterior = await this.findOne(id);

    const tipoEtiqueta = await this.prisma.tipoEtiqueta.update({
      where: { id },
      data: updateTipoEtiquetaDto,
    });

    // Registrar log de atualiza√ß√£o
    const logData: CreateLogDto = {
      acao: 'UPDATE',
      entidade: 'TipoEtiqueta',
      entidadeId: tipoEtiqueta.id,
      sistema: 'GP',
      dadosAnteriores: tipoEtiquetaAnterior,
      dadosNovos: tipoEtiqueta,
      usuarioId,
      ip,
      userAgent,
    };

    await this.logsService.create(logData);

    return tipoEtiqueta;
  }

  async remove(id: string, usuarioId: string, ip?: string, userAgent?: string) {
    const tipoEtiquetaAnterior = await this.findOne(id);

    const tipoEtiqueta = await this.prisma.tipoEtiqueta.update({
      where: { id },
      data: { ativo: false },
    });

    // Registrar log de exclus√£o
    const logData: CreateLogDto = {
      acao: 'DELETE',
      entidade: 'TipoEtiqueta',
      entidadeId: tipoEtiqueta.id,
      sistema: 'GP',
      dadosAnteriores: tipoEtiquetaAnterior,
      dadosNovos: tipoEtiqueta,
      usuarioId,
      ip,
      userAgent,
    };

    await this.logsService.create(logData);

    return tipoEtiqueta;
  }

  async getIconesDisponiveis() {
    return [
      { value: 'medical', label: 'M√©dico', icon: 'üè•' },
      { value: 'calendar', label: 'Calend√°rio', icon: 'üìÖ' },
      { value: 'document', label: 'Documento', icon: 'üìÑ' },
      { value: 'clock', label: 'Rel√≥gio', icon: '‚è∞' },
      { value: 'warning', label: 'Aviso', icon: '‚ö†Ô∏è' },
      { value: 'check', label: 'Verificado', icon: '‚úÖ' },
      { value: 'cross', label: 'Negado', icon: '‚ùå' },
      { value: 'heart', label: 'Cora√ß√£o', icon: '‚ù§Ô∏è' },
      { value: 'pill', label: 'Medicamento', icon: 'üíä' },
      { value: 'ambulance', label: 'Ambul√¢ncia', icon: 'üöë' },
      { value: 'stethoscope', label: 'Estetosc√≥pio', icon: 'ü©∫' },
      { value: 'syringe', label: 'Seringa', icon: 'üíâ' },
      { value: 'bandage', label: 'Bandagem', icon: 'ü©π' },
      { value: 'thermometer', label: 'Term√¥metro', icon: 'üå°Ô∏è' },
      { value: 'microscope', label: 'Microsc√≥pio', icon: 'üî¨' },
      { value: 'dna', label: 'DNA', icon: 'üß¨' },
      { value: 'brain', label: 'C√©rebro', icon: 'üß†' },
      { value: 'bone', label: 'Osso', icon: 'ü¶¥' },
      { value: 'tooth', label: 'Dente', icon: 'ü¶∑' },
      { value: 'eye', label: 'Olho', icon: 'üëÅÔ∏è' },
    ];
  }
} 